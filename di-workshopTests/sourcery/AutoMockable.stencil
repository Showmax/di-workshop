@testable import di_workshop
{% macro swiftifyMethodName name %}{{ name | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | snakeToCamelCase | lowerFirstWord }}{% endmacro %}
{% macro methodThrowableErrorDeclaration method %}
    var {% call swiftifyMethodName method.selectorName %}ThrowableError: Error?
{% endmacro %}
{% macro methodThrowableErrorUsage method %}
        if let error = {% call swiftifyMethodName method.selectorName %}ThrowableError {
            throw error
        }
{% endmacro %}
{% macro methodReceivedParameters method %}
    {%if method.parameters.count == 1 %}
        {% call swiftifyMethodName method.selectorName %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }} = {{ param.name }}{% endfor %}
    {% else %}
    {% if not method.parameters.count == 0 %}
        {% call swiftifyMethodName method.selectorName %}ReceivedArguments = ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %})
    {% endif %}
    {% endif %}
{% endmacro %}
{% macro methodClosureName method %}{% call swiftifyMethodName method.selectorName %}Closure{% endmacro %}
{% macro methodClosureDeclaration method %}
    var {% call methodClosureName method %}: (({% for param in method.parameters %}{{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}) {% if method.throws %}throws {% endif %}-> {% if method.isInitializer %}Void{% else %}{{ method.returnTypeName }}{% endif %})?
{% endmacro %}
{% macro methodClosureCallParameters method %}{% for param in method.parameters %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro mockMethod method %}
    // MARK: - {{ method.shortName }}

    {% if method.throws %}
        {% call methodThrowableErrorDeclaration method %}
    {% endif %}
    {% if not method.isInitializer %}
    var {% call swiftifyMethodName method.selectorName %}CallsCount = 0
    var {% call swiftifyMethodName method.selectorName %}Called: Bool {
        return {% call swiftifyMethodName method.selectorName %}CallsCount > 0
    }
    {% endif %}
    {% if method.parameters.count == 1 %}
    var {% call swiftifyMethodName method.selectorName %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: {% if param.isClosure %}({% endif %}{{ param.typeName.unwrappedTypeName }}{% if param.isClosure %}){% endif %}?{% endfor %}
    {% else %}{% if not method.parameters.count == 0 %}
    var {% call swiftifyMethodName method.selectorName %}ReceivedArguments: ({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})?
    {% endif %}{% endif %}
    {% if not method.returnTypeName.isVoid and not method.isInitializer %}
    var {% call swiftifyMethodName method.selectorName %}ReturnValue: {{ method.returnTypeName }}{{ '!' if not method.isOptionalReturnType }}{% if method.returnTypeName|hasSuffix:"Observable<Void>" %} = .empty() {% endif %}
    {% endif %}
    {% call methodClosureDeclaration method %}

{% if method.isInitializer %}
    required {{ method.name }} {
        {% call methodReceivedParameters method %}
        {% call methodClosureName method %}?({% call methodClosureCallParameters method %})
    }
{% else %}
    func {{ method.name }}{% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% if method.throws %}
        {% call methodThrowableErrorUsage method %}
        {% endif %}
        {% call swiftifyMethodName method.selectorName %}CallsCount += 1
        {% call methodReceivedParameters method %}
        {% if method.returnTypeName.isVoid %}
        {% if method.throws %}try {% endif %}{% call methodClosureName method %}?({% call methodClosureCallParameters method %})
        {% else %}
        return {% if method.throws %}try {% endif %}{% call methodClosureName method %}.map({ {% if method.throws %}try {% endif %}$0({% call methodClosureCallParameters method %}) }) ?? {% call swiftifyMethodName method.selectorName %}ReturnValue
        {% endif %}
    }

{% endif %}
{% endmacro %}
{% macro mockOptionalVariable variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }}
{% endmacro %}
{% macro mockNonOptionalArrayOrDictionaryVariable variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }} = {% if variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro %}
{% macro mockNonOptionalVariable variable %}
    var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get { return {% call underlyingMockedVariableName variable %} }
        set(value) { {% call underlyingMockedVariableName variable %} = value }
    }
    var {% call underlyingMockedVariableName variable %}: {% if variable.typeName.isClosure %}({{ variable.typeName }})!{% else %}{{ variable.typeName }}!{% endif %}
{% endmacro %}
{% macro underlyingMockedVariableName variable %}underlying{{ variable.name|upperFirstLetter }}{% endmacro %}
{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}

// MARK: - Flows
// Expected to have struct with name SomeModuleFlow, which contain only non-optional closures as properties
{% for type in types.structs where type|annotated:"AutoMockable" and type.name|hasSuffix:"Flow" %}
class {{ type.name }}Mock {
{% for variable in type.allVariables where variable.typeName.isClosure %}

    // MARK: - {{ variable.name }}
    var {{ variable.name }}CallsCount = 0
    var {{ variable.name }}Called: Bool {
        return {{ variable.name }}CallsCount > 0
    }
    /// Will be called inside {{ variable.name }} closure if not nil
    var {{ variable.name }}Raw: ({{ variable.typeName }})?
    {% if variable.typeName.closure.parameters.count == 1 %}
    var {{ variable.name }}Received: {% for param in variable.typeName.closure.parameters %}{{ param.typeName.unwrappedTypeName }}?{% endfor %}
    {% elif not variable.typeName.closure.parameters.count == 0 %}
    var {{ variable.name }}ReceivedArguments: ({% for param in variable.typeName.closure.parameters %}{% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})?
    {% endif %}
{% endfor %}

    // MARK: - Flow
    lazy var flow: {{ type.name }} = {{ type.name }}(
        {% for variable in type.allVariables where variable.typeName.isClosure %}
            {{ variable.name }}: { 
            
            {% if variable.typeName.closure.parameters.count == 1 %}
                self.{{ variable.name }}Received = $0
            {% elif not variable.typeName.closure.parameters.count == 0 %}
                self.{{ variable.name }}ReceivedArguments = ({% for param in variable.typeName.closure.parameters %}${{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %})
            {% endif %}
                self.{{ variable.name }}CallsCount += 1
                {% if variable.typeName.closure.returnTypeName|hasSuffix:"Void" %}
                self.{{ variable.name }}Raw?({% for param in variable.typeName.closure.parameters %}${{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %})
                {% else %}
                return self.{{ variable.name }}Raw!({% for param in variable.typeName.closure.parameters %}${{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %})
                {% endif %}
            }{% if not forloop.last %},{% endif %}
        {% endfor %}
    )
}
{% endfor %}

// MARK: - AutoMockable protocols
{% for type in types.protocols where type.based.AutoMockable or type|annotated:"AutoMockable" %}{% if type.name != "AutoMockable" %}
class {{ type.name }}Mock: {{ type.name }} {
{% for variable in type.allVariables|!definedInExtension %}
    {% if variable.isOptional %}{% call mockOptionalVariable variable %}{% elif variable.isArray or variable.isDictionary %}{% call mockNonOptionalArrayOrDictionaryVariable variable %}{% else %}{% call mockNonOptionalVariable variable %}{% endif %}
{% endfor %}

{% for method in type.allMethods|!definedInExtension %}
    {% call mockMethod method %}
{% endfor %}
}
{% endif %}{% endfor %}
